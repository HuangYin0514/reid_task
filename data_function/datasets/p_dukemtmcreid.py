# encoding: utf-8


import glob
import os.path as osp
import re
import urllib
import zipfile

from .base_dataset import BaseDataset


class P_DukeMTMCreID(BaseDataset):
    """
    DukeMTMC-reID
    Reference:
    1. Ristani et al. Performance Measures and a Data Set for Multi-Target, Multi-Camera Tracking. ECCVW 2016.
    2. Zheng et al. Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro. ICCV 2017.
    URL: https://github.com/layumi/DukeMTMC-reID_evaluation

    Dataset statistics:
    # identities: 1404 (train + query)
    # images:16522 (train) + 2228 (query) + 17661 (gallery)
    # cameras: 8
    """

    dataset_dir = ""

    def __init__(self, root="", **kwargs):
        super(P_DukeMTMCreID, self).__init__()
        self.dataset_dir = osp.join(root, self.dataset_dir)
        self.train_dir = osp.join(self.dataset_dir, "bounding_box_train")
        self.query_dir = osp.join(self.dataset_dir, "query")
        self.gallery_dir = osp.join(self.dataset_dir, "bounding_box_test")

        self._check_before_run()

        self.train = self._process_dir(self.train_dir, relabel=True)
        self.query = self._process_dir(self.query_dir, relabel=False)
        self.gallery = self._process_dir(self.gallery_dir, relabel=False)

        num_train_pids, num_train_imgs, num_train_cams = self.get_imagedata_info(self.train)
        # num_query_pids, num_query_imgs, num_query_cams = self.get_imagedata_info(self.query)
        # num_gallery_pids, num_gallery_imgs, num_gallery_cams = self.get_imagedata_info(self.gallery)

        self.num_train_pids = num_train_pids

    def _check_before_run(self):
        """Check if all files are available before going deeper"""
        if not osp.exists(self.dataset_dir):
            raise RuntimeError("'{}' is not available".format(self.dataset_dir))
        if not osp.exists(self.train_dir):
            raise RuntimeError("'{}' is not available".format(self.train_dir))
        if not osp.exists(self.query_dir):
            raise RuntimeError("'{}' is not available".format(self.query_dir))
        if not osp.exists(self.gallery_dir):
            raise RuntimeError("'{}' is not available".format(self.gallery_dir))

    def _analysis_file_name(self, total_file_name):
        file_name = total_file_name.split("/")[-1]
        split_list = file_name.replace(".jpg", "").replace("c", "").split("_")
        identi_id, camera_id = int(split_list[0]), int(split_list[1])
        return identi_id, camera_id

    def _process_dir(self, dir_path, relabel=False):
        # 摄像头 cid 存在错误，所以这里不进行 cid 的处理
        img_paths = glob.glob(osp.join(dir_path, "*.jpg"))

        pid_container = set()
        for img_path in img_paths:
            pid, camid = self._analysis_file_name(img_path)
            pid_container.add(pid)
        pid2label = {pid: label for label, pid in enumerate(pid_container)}

        dataset = []
        for img_path in img_paths:
            pid, camid = self._analysis_file_name(img_path)
            # assert 1 <= camid <= 8
            # camid -= 1  # index starts from 0
            if relabel:
                pid = pid2label[pid]
            dataset.append((img_path, pid, camid))

        return dataset
